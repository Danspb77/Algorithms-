import numpy as np
import matplotlib.pyplot as plt

def poly_legendre(n, x):
  """
  Функция, вычисляющая полиномы Лежандра n-го порядка.

  Args:
    n: Целое число, обозначающее порядок полинома.
    x: Массив значений x, для которых вычисляются полиномы.

  Returns:
    Массив значений полиномов Лежандра n-го порядка для заданных x.
  """
  if n == 0:
    return np.ones_like(x)
  elif n == 1:
    return x
  else:
    P_nm1 = poly_legendre(n - 1, x)
    P_nm2 = poly_legendre(n - 2, x)
    return ((2 * n - 1) * x * P_nm1 - (n - 1) * P_nm2) / n

def poly_fit(x, y, n):
  """
  Функция, выполняющая полиномиальную регрессию n-го порядка с использованием метода наименьших квадратов (МНК).

  Args:
    x: Массив значений x.
    y: Массив значений y.
    n: Целое число, обозначающее порядок полинома.

  Returns:
    Массив коэффициентов полинома n-го порядка.
  """
  A = np.vander(poly_legendre(n + 1, x), increasing=True)  # Увеличение на 1
  c, _, _, _ = np.linalg.lstsq(A, y, rcond=None)
  return c

def predict(x, c, n):
  """
  Функция, прогнозирующая значения y для заданных x с использованием полинома n-го порядка, полученного методом МНК.

  Args:
    x: Массив значений x, для которых выполняется прогнозирование.
    c: Массив коэффициентов полинома n-го порядка.
    n: Целое число, обозначающее порядок полинома.

  Returns:
    Массив прогнозируемых значений y.
  """
  y_pred = poly_legendre(n, x) @ c  # Изменение: использование n вместо n + 1
  return y_pred

# Пример использования

# Загружаем данные
x = np.array([0, 1, 2, 3, 4, 5])
y = np.array([1, 4, 9, 16, 25, 36])

# Определяем порядок полинома
n = 2

# Вычисляем коэффициенты полинома
c = poly_fit(x, y, n)

# Прогнозируем значения y для новых значений x
x_new = np.array([0.5, 2.5, 4.5])
y_pred = predict(x_new, c, n)

# Отображаем данные и прогноз
plt.plot(x, y, 'o', label='Данные')
plt.plot(x_new, y_pred, 'x', label='Прогноз')
plt.xlabel('X')
plt.ylabel('Y')
plt.title(f'Полиномиальная регрессия n = {n}')
plt.legend()
plt.grid(True)
plt.show()

